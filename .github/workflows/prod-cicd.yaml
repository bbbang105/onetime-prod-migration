name: 🚀 Build & Deploy workflow on production environment

on:
  pull_request:
    branches: [main]
    types: [closed] # PR이 main에 merge될 때 실행

permissions:
  contents: read

jobs:
  build:
    if: github.event.pull_request.merged == true # PR merge된 경우에만 실행
    runs-on: ubuntu-latest
    steps:
      # 1. GitHub 리포지토리에서 코드 체크아웃
      - name: ✅ Checkout branch
        uses: actions/checkout@v3

      # 2. Gradle로 프로젝트 빌드
      - name: 📦 Build Project
        run: ./gradlew clean build

      # 3. 빌드 결과 확인
      - name: 🕵️ Verify Build Output
        run: ls -l build/libs

  deploy:
    needs: build
    if: github.event.pull_request.merged == true
    environment: production # GitHub Actions의 production 환경 Secrets 사용
    runs-on: ubuntu-latest
    steps:
      # 1. GitHub 리포지토리에서 코드 체크아웃
      - name: ✅ Checkout branch
        uses: actions/checkout@v3

      # 2. 현재 타임스탬프 생성
      - name: 🕒 Generate timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      # 3. Production 환경의 .env 파일 생성
      - name: ⚙️ Restore .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      # 4. Production 환경의 docker-compose.yaml 생성
      - name: 🐋 Restore docker-compose.yaml
        run: |
          echo "${{ secrets.DOCKER_COMPOSE_FILE }}" > docker-compose.yaml

      # 5. Production 파일 압축 (기존 파일 + 빌드된 JAR 포함)
      - name: 📦 Compress all files
        run: |
          mkdir temp_deploy_package
          cp -r .env docker-compose.yaml appspec.yml deploy/ temp_deploy_package/
          cp build/libs/*.jar temp_deploy_package/
          cd temp_deploy_package && zip -r ../build-${{ github.sha }}.zip . && cd ..
          rm -rf temp_deploy_package

      # 6. AWS Credentials 설정
      - name: 🌎 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 7. S3 버킷으로 파일 업로드
      - name: 🚛 Upload to S3
        run: aws s3 cp build-${{ github.sha }}.zip s3://${{ secrets.S3_BUCKET_NAME }}/prod/build-${{ github.sha }}.zip

      # 8. CodeDeploy를 통해 배포 수행
      - name: 🚀 Deploy to EC2 with CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_PROD_GROUP }} \
            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},key=prod/build-${{ github.sha }}.zip,bundleType=zip
